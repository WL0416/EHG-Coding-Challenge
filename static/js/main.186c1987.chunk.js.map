{"version":3,"sources":["utils/tools.js","components/RectGenerator.js","App.js","serviceWorker.js","index.js"],"names":["colorCalculator","color","nextColor","RectGenerator","useState","width","setWidth","height","setHeight","steps","start","result","i","push","stepsGenerator","rgb","Math","floor","random","red","useRef","green","blue","useEffect","canvas","document","getElementById","ctx","getContext","clearRect","imageData","createImageData","data","length","current","realIndex","pow","putImageData","handleChange","e","target","id","value","console","log","style","textAlign","htmlFor","name","margin","onChange","map","key","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"oJAoBaA,EAAkB,SAACC,GAC9B,IAAIC,EAAYD,EAAQ,EAIxB,OAHIC,GAAa,MACfA,GAAwB,KAEnBA,GCmFMC,EAzGO,WAAO,IAAD,EACAC,mBAAS,GADT,mBACnBC,EADmB,KACZC,EADY,OAEEF,mBAAS,GAFX,mBAEnBG,EAFmB,KAEXC,EAFW,KAKpBC,EDLsB,SAACC,EAAOD,GAEpC,IADA,IAAME,EAAS,GACNC,EAAI,EAAGA,GAAKH,EAAOG,IAC1BD,EAAOE,KAAKH,EAAQE,GAEtB,OAAOD,ECAOG,CAAe,EAAG,IAC1BC,EDOC,CAHKC,KAAKC,MAAsB,IAAhBD,KAAKE,UACdF,KAAKC,MAAsB,IAAhBD,KAAKE,UACjBF,KAAKC,MAAsB,IAAhBD,KAAKE,WCLzBC,EAAMC,iBAAOL,EAAI,IACjBM,EAAQD,iBAAOL,EAAI,IACnBO,EAAOF,iBAAOL,EAAI,IAGtBQ,qBAAU,WACR,IAAMC,EAASC,SAASC,eAAe,UACjCC,EAAMH,EAAOI,WAAW,MAC9BD,EAAIE,UAAU,EAAG,EAAGL,EAAOnB,MAAOmB,EAAOjB,QAKzC,IAHA,IAAMuB,EAAYH,EAAII,gBAAgB1B,EAAOE,GAGpCK,EAAI,EAAGA,EAAIkB,EAAUE,KAAKC,OAAQrB,GAAK,EAAG,CAEjDkB,EAAUE,KAAKpB,EAAI,GAAKO,EAAIe,QAC5BJ,EAAUE,KAAKpB,EAAI,GAAKS,EAAMa,QAC9BJ,EAAUE,KAAKpB,EAAI,GAAKU,EAAKY,QAC7BJ,EAAUE,KAAKpB,EAAI,GAtBT,IA+BVU,EAAKY,QAAUlC,EAAgBsB,EAAKY,SACpC,IAAMC,EAAYvB,EAAI,EAClBuB,EAAY,MAAQ,IACtBd,EAAMa,QAAUlC,EAAgBqB,EAAMa,UAEpCC,EAAYnB,KAAKoB,IAAI,IAAK,KAAO,IACnCjB,EAAIe,QAAUlC,EAAgBmB,EAAIe,UAKtCP,EAAIU,aAAaP,EAAW,EAAG,MAGjC,IAAMQ,EAAe,SAACC,GACpB,OAAQA,EAAEC,OAAOC,IACf,IAAK,QACHnC,EAASiC,EAAEC,OAAOE,OAClB,MACF,IAAK,SACHlC,EAAU+B,EAAEC,OAAOE,OACnB,MACF,QACEC,QAAQC,IAAI,qBAKlB,OACE,oCACE,yBAAKC,MAAO,CAAEC,UAAW,WACtB,IACD,+CACA,2BAAOC,QAAQ,SAAf,eACA,4BACEN,GAAG,QACHO,KAAK,QACLH,MAAO,CAAEI,OAAQ,QACjBC,SAAUZ,GAET7B,EAAM0C,KAAI,SAACT,GACV,OACE,4BAAQA,MAAOA,EAAOU,IAAK,QAAUV,GAClCA,OAKT,2BAAOK,QAAQ,UAAf,gBACA,4BACEN,GAAG,SACHO,KAAK,SACLH,MAAO,CAAEI,OAAQ,QACjBC,SAAUZ,GAET7B,EAAM0C,KAAI,SAACT,GACV,OACE,4BAAQA,MAAOA,EAAOU,IAAK,SAAWV,GACnCA,QAMX,yBAAKG,MAAO,CAAEC,UAAW,WACvB,4BAAQL,GAAG,SAASpC,MAAOA,EAAOE,OAAQA,OC1FnC8C,MARf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFrC,SAASC,eAAe,SD0HpB,kBAAmBqC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3B,QAAQ2B,MAAMA,EAAMC,a","file":"static/js/main.186c1987.chunk.js","sourcesContent":["/*\n    This function is used to generate the steps functionally\n*/\nexport const stepsGenerator = (start, steps) => {\n  const result = [];\n  for (let i = 1; i <= steps; i++) {\n    result.push(start * i);\n  }\n  return result;\n};\n\n// initialise red, green and blue with random numbers\nexport const rgbInit = () => {\n  const red = Math.floor(Math.random() * 256);\n  const green = Math.floor(Math.random() * 256);\n  const blue = Math.floor(Math.random() * 256);\n  return [red, green, blue];\n};\n\n// calculate colors based on the initial random number and image size\nexport const colorCalculator = (color) => {\n  let nextColor = color + 1;\n  if (nextColor >= 256) {\n    nextColor = nextColor % 256;\n  }\n  return nextColor;\n};\n","import React, { useState, useEffect, useRef } from \"react\";\nimport { stepsGenerator, rgbInit, colorCalculator } from \"../utils/tools\";\n\nconst RectGenerator = () => {\n  const [width, setWidth] = useState(8);\n  const [height, setHeight] = useState(8);\n  const ALPHA = 255;\n  // Generate image step which is start from 8 to 256\n  const steps = stepsGenerator(8, 32);\n  const rgb = rgbInit();\n  let red = useRef(rgb[0]);\n  let green = useRef(rgb[1]);\n  let blue = useRef(rgb[2]);\n\n  // Canvas would be redraw when the step from either direction is changed\n  useEffect(() => {\n    const canvas = document.getElementById(\"canvas\");\n    const ctx = canvas.getContext(\"2d\");\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    const imageData = ctx.createImageData(width, height);\n\n    // Iterate through every pixel\n    for (let i = 0; i < imageData.data.length; i += 4) {\n      // Modify pixel data\n      imageData.data[i + 0] = red.current; // R value\n      imageData.data[i + 1] = green.current; // G value\n      imageData.data[i + 2] = blue.current; // B value\n      imageData.data[i + 3] = ALPHA; // A value\n\n      /* \n      Using n-ary tree data structure to store (logically) colors and find unique path which represents the unique color \n      in RGB mode throughout the tree, blue color is the leaf layer, when the leaves count to 256, trace back to the \n      parent node layer which is green and create a new green node, when the green nodes count to 256, trace back to the \n      parent node layer which is red, this algorithm can cover 16,777,216 colors and render image from random start color \n      with efficient calculations according to the image size.  \n      */\n      blue.current = colorCalculator(blue.current);\n      const realIndex = i / 4;\n      if (realIndex % 256 === 0) {\n        green.current = colorCalculator(green.current);\n      }\n      if (realIndex % Math.pow(256, 2) === 0) {\n        red.current = colorCalculator(red.current);\n      }\n    }\n\n    // Draw image data to the canvas\n    ctx.putImageData(imageData, 0, 0);\n  });\n\n  const handleChange = (e) => {\n    switch (e.target.id) {\n      case \"width\":\n        setWidth(e.target.value);\n        break;\n      case \"height\":\n        setHeight(e.target.value);\n        break;\n      default:\n        console.log(\"Invalid handler\");\n        break;\n    }\n  };\n\n  return (\n    <>\n      <div style={{ textAlign: \"center\" }}>\n        {\" \"}\n        <h1>Image Generator</h1>\n        <label htmlFor=\"width\">Width (px):</label>\n        <select\n          id=\"width\"\n          name=\"width\"\n          style={{ margin: \"1rem\" }}\n          onChange={handleChange}\n        >\n          {steps.map((value) => {\n            return (\n              <option value={value} key={\"width\" + value}>\n                {value}\n              </option>\n            );\n          })}\n        </select>\n        <label htmlFor=\"height\">Height (px):</label>\n        <select\n          id=\"height\"\n          name=\"height\"\n          style={{ margin: \"1rem\" }}\n          onChange={handleChange}\n        >\n          {steps.map((value) => {\n            return (\n              <option value={value} key={\"height\" + value}>\n                {value}\n              </option>\n            );\n          })}\n        </select>\n      </div>\n      <div style={{ textAlign: \"center\" }}>\n        <canvas id=\"canvas\" width={width} height={height}></canvas>\n      </div>\n    </>\n  );\n};\n\nexport default RectGenerator;\n","import React from \"react\";\nimport \"./App.css\";\nimport RectGenerator from \"./components/RectGenerator\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <RectGenerator />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}